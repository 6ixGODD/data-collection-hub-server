// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"

	"data-collection-hub-server/internal/pkg/config"
	"data-collection-hub-server/internal/pkg/dao"
	"data-collection-hub-server/internal/pkg/dao/mods"
	"data-collection-hub-server/internal/pkg/service"
	"data-collection-hub-server/internal/pkg/service/admin"
	mods2 "data-collection-hub-server/internal/pkg/service/admin/mods"
	"data-collection-hub-server/internal/pkg/service/common"
	mods3 "data-collection-hub-server/internal/pkg/service/common/mods"
	"data-collection-hub-server/internal/pkg/service/sys"
	mods4 "data-collection-hub-server/internal/pkg/service/sys/mods"
	"data-collection-hub-server/internal/pkg/service/user"
	mods5 "data-collection-hub-server/internal/pkg/service/user/mods"
	"data-collection-hub-server/pkg/jwt"
	"data-collection-hub-server/pkg/mongo"
	"data-collection-hub-server/pkg/prometheus"
	"data-collection-hub-server/pkg/redis"
	"data-collection-hub-server/pkg/zap"
	"data-collection-hub-server/test/mock"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeTestInjector(ctx context.Context, cfg *config.Config, n int) (*Injector, error) {
	redis, err := InitializeRedis(ctx, cfg)
	if err != nil {
		return nil, err
	}
	cache := dao.NewCache(redis, cfg)
	mongo, err := InitializeMongo(ctx, cfg)
	if err != nil {
		return nil, err
	}
	zap, err := InitializeZap(cfg)
	if err != nil {
		return nil, err
	}
	jwt, err := InitializeJwt(cfg)
	if err != nil {
		return nil, err
	}
	prometheus := InitializePrometheus(cfg)
	core, err := dao.NewCore(ctx, mongo, zap, cfg)
	if err != nil {
		return nil, err
	}
	userDao, err := mods.NewUserDao(ctx, core, cache)
	if err != nil {
		return nil, err
	}
	instructionDataDao, err := mods.NewInstructionDataDao(ctx, core, userDao)
	if err != nil {
		return nil, err
	}
	noticeDao, err := mods.NewNoticeDao(ctx, core, cache)
	if err != nil {
		return nil, err
	}
	documentationDao, err := mods.NewDocumentationDao(ctx, core, cache)
	if err != nil {
		return nil, err
	}
	loginLogDao, err := mods.NewLoginLogDao(ctx, core, cache, userDao)
	if err != nil {
		return nil, err
	}
	operationLogDao, err := mods.NewOperationLogDao(ctx, core, cache, userDao)
	if err != nil {
		return nil, err
	}
	userDaoMock := mock.NewUserDaoMockWithRandomData(n, userDao)
	instructionDataDaoMock := mock.NewInstructionDataDaoMockWithRandomData(n, userDaoMock, instructionDataDao)
	noticeDaoMock := mock.NewNoticeDaoMockWithRandomData(n, noticeDao)
	documentationDaoMock := mock.NewDocumentationDaoMockWithRandomData(n, documentationDao)
	loginLogDaoMock := mock.NewLoginLogDaoMockWithRandomData(n, loginLogDao, userDaoMock)
	operationLogDaoMock := mock.NewOperationLogDaoMockWithRandomData(n, operationLogDao, userDaoMock, instructionDataDaoMock, noticeDaoMock, documentationDaoMock)
	serviceCore := &service.Core{
		Config: cfg,
	}
	dataAuditService := mods2.NewDataAuditService(serviceCore, instructionDataDao)
	documentationService := mods2.NewDocumentationService(serviceCore, documentationDao)
	noticeService := mods2.NewNoticeService(serviceCore, noticeDao)
	logsService := mods2.NewLogsService(serviceCore, loginLogDao, operationLogDao)
	statisticService := mods2.NewStatisticService(serviceCore, instructionDataDao, userDao)
	userService := mods2.NewUserService(serviceCore, userDao)
	authService := mods3.NewAuthService(serviceCore, userDao, cache, jwt)
	idempotencyService := mods3.NewIdempotencyService(serviceCore, cache)
	modsDocumentationService := mods3.NewDocumentationService(serviceCore, documentationDao)
	modsNoticeService := mods3.NewNoticeService(serviceCore, noticeDao)
	profileService := mods3.NewProfileService(serviceCore, userDao)
	modsLogsService := mods4.NewLogsService(serviceCore, loginLogDao, operationLogDao)
	datasetService := mods5.NewDatasetService(serviceCore, instructionDataDao, operationLogDao)
	modsStatisticService := mods5.NewStatisticService(serviceCore, instructionDataDao)
	wireInjector := &Injector{
		Ctx:                        ctx,
		Config:                     cfg,
		Cache:                      cache,
		Mongo:                      mongo,
		Redis:                      redis,
		Zap:                        zap,
		Jwt:                        jwt,
		Prometheus:                 prometheus,
		UserDao:                    userDao,
		InstructionDataDao:         instructionDataDao,
		NoticeDao:                  noticeDao,
		DocumentationDao:           documentationDao,
		LoginLogDao:                loginLogDao,
		OperationLogDao:            operationLogDao,
		UserDaoMock:                userDaoMock,
		InstructionDataDaoMock:     instructionDataDaoMock,
		NoticeDaoMock:              noticeDaoMock,
		DocumentationDaoMock:       documentationDaoMock,
		LoginLogDaoMock:            loginLogDaoMock,
		OperationLogDaoMock:        operationLogDaoMock,
		AdminDataAuditService:      dataAuditService,
		AdminDocumentationService:  documentationService,
		AdminNoticeService:         noticeService,
		AdminLogsService:           logsService,
		AdminStatisticService:      statisticService,
		AdminUserService:           userService,
		CommonAuthService:          authService,
		CommonIdempotencyService:   idempotencyService,
		CommonDocumentationService: modsDocumentationService,
		CommonNoticeService:        modsNoticeService,
		CommonProfileService:       profileService,
		SysLogsService:             modsLogsService,
		UserDatasetService:         datasetService,
		UserStatisticService:       modsStatisticService,
	}
	return wireInjector, nil
}

// wire.go:

type Injector struct {
	// Common
	Ctx        context.Context
	Config     *config.Config
	Cache      *dao.Cache
	Mongo      *mongo.Mongo
	Redis      *redis.Redis
	Zap        *zap.Zap
	Jwt        *jwt.Jwt
	Prometheus *prometheus.Prometheus

	// DAOs
	UserDao            mods.UserDao
	InstructionDataDao mods.InstructionDataDao
	NoticeDao          mods.NoticeDao
	DocumentationDao   mods.DocumentationDao
	LoginLogDao        mods.LoginLogDao
	OperationLogDao    mods.OperationLogDao

	// Mocks for DAOs
	UserDaoMock            *mock.UserDaoMock
	InstructionDataDaoMock *mock.InstructionDataDaoMock
	NoticeDaoMock          *mock.NoticeDaoMock
	DocumentationDaoMock   *mock.DocumentationDaoMock
	LoginLogDaoMock        *mock.LoginLogDaoMock
	OperationLogDaoMock    *mock.OperationLogDaoMock

	// Services
	// Admin services
	AdminDataAuditService     mods2.DataAuditService
	AdminDocumentationService mods2.DocumentationService
	AdminNoticeService        mods2.NoticeService
	AdminLogsService          mods2.LogsService
	AdminStatisticService     mods2.StatisticService
	AdminUserService          mods2.UserService
	// Common services
	CommonAuthService          mods3.AuthService
	CommonIdempotencyService   mods3.IdempotencyService
	CommonDocumentationService mods3.DocumentationService
	CommonNoticeService        mods3.NoticeService
	CommonProfileService       mods3.ProfileService
	// Sys services
	SysLogsService mods4.LogsService
	// User services
	UserDatasetService   mods5.DatasetService
	UserStatisticService mods5.StatisticService
}

var (
	ServiceProviderSet = wire.NewSet(wire.Struct(new(service.Core), "*"), wire.Struct(new(admin.Admin), "*"), wire.Struct(new(user.User), "*"), wire.Struct(new(common.Common), "*"), wire.Struct(new(sys.Sys), "*"), mods2.NewDataAuditService, mods2.NewStatisticService, mods2.NewUserService, mods2.NewNoticeService, mods2.NewDocumentationService, mods2.NewLogsService, mods3.NewAuthService, mods3.NewProfileService, mods3.NewDocumentationService, mods3.NewNoticeService, mods3.NewIdempotencyService, mods5.NewDatasetService, mods5.NewStatisticService, mods4.NewLogsService)

	DaoProviderSet = wire.NewSet(dao.NewCore, dao.NewCache, mods.NewUserDao, mods.NewInstructionDataDao, mods.NewNoticeDao, mods.NewLoginLogDao, mods.NewOperationLogDao, mods.NewDocumentationDao)

	MockProviderSet = wire.NewSet(mock.NewUserDaoMockWithRandomData, mock.NewInstructionDataDaoMockWithRandomData, mock.NewNoticeDaoMockWithRandomData, mock.NewLoginLogDaoMockWithRandomData, mock.NewOperationLogDaoMockWithRandomData, mock.NewDocumentationDaoMockWithRandomData)
)
