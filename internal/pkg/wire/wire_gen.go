// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"data-collection-hub-server/internal/app"
	"data-collection-hub-server/internal/pkg/api/v1"
	"data-collection-hub-server/internal/pkg/api/v1/admin"
	mods3 "data-collection-hub-server/internal/pkg/api/v1/admin/mods"
	"data-collection-hub-server/internal/pkg/api/v1/common"
	mods5 "data-collection-hub-server/internal/pkg/api/v1/common/mods"
	"data-collection-hub-server/internal/pkg/api/v1/user"
	mods7 "data-collection-hub-server/internal/pkg/api/v1/user/mods"
	"data-collection-hub-server/internal/pkg/config"
	"data-collection-hub-server/internal/pkg/dao"
	"data-collection-hub-server/internal/pkg/dao/mods"
	"data-collection-hub-server/internal/pkg/middleware"
	mods9 "data-collection-hub-server/internal/pkg/middleware/mods"
	router2 "data-collection-hub-server/internal/pkg/router"
	"data-collection-hub-server/internal/pkg/router/v1"
	mods8 "data-collection-hub-server/internal/pkg/router/v1/mods"
	"data-collection-hub-server/internal/pkg/service"
	admin2 "data-collection-hub-server/internal/pkg/service/admin"
	mods2 "data-collection-hub-server/internal/pkg/service/admin/mods"
	common2 "data-collection-hub-server/internal/pkg/service/common"
	mods4 "data-collection-hub-server/internal/pkg/service/common/mods"
	user2 "data-collection-hub-server/internal/pkg/service/user"
	mods6 "data-collection-hub-server/internal/pkg/service/user/mods"
	"data-collection-hub-server/pkg/cron"
	"github.com/google/wire"
)

// Injectors from wire.go:

// InitializeApp initialize app
func InitializeApp(ctx context.Context) (*app.App, error) {
	configConfig, err := config.New()
	if err != nil {
		return nil, err
	}
	zap, err := InitializeZap(configConfig)
	if err != nil {
		return nil, err
	}
	redis, err := InitializeRedis(ctx, configConfig)
	if err != nil {
		return nil, err
	}
	serviceService := &service.Core{
		Logger: zap,
		Redis:  redis,
		Config: configConfig,
	}
	mongo, err := InitializeMongo(ctx, configConfig)
	if err != nil {
		return nil, err
	}
	daoDao, err := dao.New(ctx, mongo, zap)
	if err != nil {
		return nil, err
	}
	cache := &dao.Cache{
		Redis:  redis,
		Config: configConfig,
	}
	userDao, err := mods.NewUserDao(ctx, daoDao, cache)
	if err != nil {
		return nil, err
	}
	instructionDataDao, err := mods.NewInstructionDataDao(ctx, daoDao, userDao)
	if err != nil {
		return nil, err
	}
	dataAuditService := mods2.NewDataAuditService(serviceService, instructionDataDao)
	dataAuditApi := &mods3.DataAuditApi{
		DataAuditService: dataAuditService,
	}
	statisticService := mods2.NewStatisticService(serviceService, instructionDataDao, userDao)
	statisticApi := &mods3.StatisticApi{
		StatisticService: statisticService,
	}
	userService := mods2.NewUserService(serviceService, userDao)
	userApi := &mods3.UserApi{
		UserService: userService,
	}
	noticeDao, err := mods.NewNoticeDao(ctx, daoDao, cache)
	if err != nil {
		return nil, err
	}
	noticeService := mods2.NewNoticeService(serviceService, noticeDao)
	noticeApi := &mods3.NoticeApi{
		NoticeService: noticeService,
	}
	documentationDao, err := mods.NewDocumentationDao(ctx, daoDao, cache)
	if err != nil {
		return nil, err
	}
	documentationService := mods2.NewDocumentationService(serviceService, documentationDao)
	documentationApi := &mods3.DocumentationApi{
		DocumentationService: documentationService,
	}
	loginLogDao, err := mods.NewLoginLogDao(ctx, daoDao)
	if err != nil {
		return nil, err
	}
	operationLogDao, err := mods.NewOperationLogDao(ctx, daoDao)
	if err != nil {
		return nil, err
	}
	logsService := mods2.NewLogsService(serviceService, loginLogDao, operationLogDao)
	logsApi := &mods3.LogsApi{
		LogsService: logsService,
	}
	adminAdmin := &admin.Admin{
		DataAuditApi:     dataAuditApi,
		StatisticApi:     statisticApi,
		UserApi:          userApi,
		NoticeApi:        noticeApi,
		DocumentationApi: documentationApi,
		LogsApi:          logsApi,
	}
	jwt, err := InitializeJwt(configConfig)
	if err != nil {
		return nil, err
	}
	authService := mods4.NewAuthService(serviceService, userDao, loginLogDao, jwt)
	authApi := &mods5.AuthApi{
		AuthService: authService,
	}
	profileService := mods4.NewProfileService(serviceService, userDao)
	profileApi := &mods5.ProfileApi{
		ProfileService: profileService,
	}
	modsDocumentationService := mods4.NewDocumentationService(serviceService, documentationDao)
	modsDocumentationApi := &mods5.DocumentationApi{
		DocumentationService: modsDocumentationService,
	}
	modsNoticeService := mods4.NewNoticeService(serviceService, noticeDao)
	modsNoticeApi := &mods5.NoticeApi{
		NoticeService: modsNoticeService,
	}
	commonCommon := &common.Common{
		AuthApi:          authApi,
		ProfileApi:       profileApi,
		DocumentationApi: modsDocumentationApi,
		NoticeApi:        modsNoticeApi,
	}
	datasetService := mods6.NewDatasetService(serviceService, instructionDataDao, operationLogDao)
	datasetApi := &mods7.DatasetApi{
		DatasetService: datasetService,
	}
	modsStatisticService := mods6.NewStatisticService(serviceService, instructionDataDao)
	modsStatisticApi := &mods7.StatisticApi{
		StatisticService: modsStatisticService,
	}
	userUser := &user.User{
		DatasetApi:   datasetApi,
		StatisticApi: modsStatisticApi,
	}
	apiApi := &api.Api{
		AdminApi:  adminAdmin,
		CommonApi: commonCommon,
		UserApi:   userUser,
	}
	adminRouter := &mods8.AdminRouter{}
	commonRouter := &mods8.CommonRouter{}
	userRouter := &mods8.UserRouter{}
	routerRouter := &router.Router{
		ApiV1:        apiApi,
		AdminRouter:  adminRouter,
		CommonRouter: commonRouter,
		UserRouter:   userRouter,
	}
	router3 := &router2.Router{
		RouterV1: routerRouter,
	}
	authMiddleware := &mods9.AuthMiddleware{
		Jwt: jwt,
		Zap: zap,
	}
	loggingMiddleware := &mods9.LoggingMiddleware{
		Zap:   zap,
		Redis: redis,
	}
	prometheus := InitializePrometheus(configConfig)
	prometheusMiddleware := &mods9.PrometheusMiddleware{
		Prometheus: prometheus,
		Zap:        zap,
	}
	middlewareMiddleware := &middleware.Middleware{
		AuthMiddleware:       authMiddleware,
		LoggingMiddleware:    loggingMiddleware,
		PrometheusMiddleware: prometheusMiddleware,
	}
	scheduler := cron.New(ctx)
	appApp, err := app.New(ctx, zap, configConfig, router3, middlewareMiddleware, scheduler)
	if err != nil {
		return nil, err
	}
	return appApp, nil
}

// wire.go:

var (
	RouterProviderSet = wire.NewSet(wire.Struct(new(mods8.AdminRouter), "*"), wire.Struct(new(mods8.UserRouter), "*"), wire.Struct(new(mods8.CommonRouter), "*"), wire.Struct(new(router.Router), "*"), wire.Struct(new(router2.Router), "*"))

	ApiProviderSet = wire.NewSet(wire.Struct(new(mods5.AuthApi), "*"), wire.Struct(new(mods5.ProfileApi), "*"), wire.Struct(new(mods5.DocumentationApi), "*"), wire.Struct(new(mods5.NoticeApi), "*"), wire.Struct(new(mods7.DatasetApi), "*"), wire.Struct(new(mods7.StatisticApi), "*"), wire.Struct(new(mods3.UserApi), "*"), wire.Struct(new(mods3.DocumentationApi), "*"), wire.Struct(new(mods3.NoticeApi), "*"), wire.Struct(new(mods3.StatisticApi), "*"), wire.Struct(new(mods3.LogsApi), "*"), wire.Struct(new(mods3.DataAuditApi), "*"), wire.Struct(new(common.Common), "*"), wire.Struct(new(user.User), "*"), wire.Struct(new(admin.Admin), "*"), wire.Struct(new(api.Api), "*"))

	ServiceProviderSet = wire.NewSet(wire.Struct(new(service.Core), "*"), wire.Struct(new(admin2.Admin), "*"), wire.Struct(new(user2.User), "*"), wire.Struct(new(common2.Common), "*"), mods2.NewDataAuditService, mods2.NewStatisticService, mods2.NewUserService, mods2.NewNoticeService, mods2.NewDocumentationService, mods2.NewLogsService, mods4.NewAuthService, mods4.NewProfileService, mods4.NewDocumentationService, mods4.NewNoticeService, mods6.NewDatasetService, mods6.NewStatisticService)

	DaoProviderSet = wire.NewSet(dao.New, wire.Struct(new(dao.Cache), "*"), mods.NewUserDao, mods.NewInstructionDataDao, mods.NewNoticeDao, mods.NewLoginLogDao, mods.NewOperationLogDao, mods.NewDocumentationDao)

	MiddlewareProviderSet = wire.NewSet(wire.Struct(new(mods9.LoggingMiddleware), "*"), wire.Struct(new(mods9.PrometheusMiddleware), "*"), wire.Struct(new(mods9.AuthMiddleware), "*"), wire.Struct(new(middleware.Middleware), "*"))

	SchedulerProviderSet = wire.NewSet(cron.New)
)
